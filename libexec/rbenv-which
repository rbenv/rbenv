#!/usr/bin/env bash
#
# Summary: Display the full path to an executable
#
# Usage: rbenv which <command>
#
# Displays the full path to the executable that rbenv will invoke when
# you run the given command.

set -e
[ -n "$RBENV_DEBUG" ] && set -x

# Provide rbenv completions
if [ "$1" = "--complete" ]; then
  exec rbenv-shims --short
fi

remove_from_path() {
  local path_to_remove="$1"
  local path_before
  local result=":${PATH//\~/$HOME}:"
  while [ "$path_before" != "$result" ]; do
    path_before="$result"
    result="${result//:$path_to_remove:/:}"
  done
  result="${result%:}"
  echo "${result#:}"
}

RBENV_COMMAND="$1"

if [ -z "$RBENV_COMMAND" ]; then
  rbenv-help --usage which >&2
  exit 1
fi

RBENV_VERSION="${RBENV_VERSION:-$(rbenv-version-name)}"

if [ "$RBENV_VERSION" = "system" ]; then
  PATH="$(remove_from_path "${RBENV_ROOT}/shims")" \
    RBENV_COMMAND_PATH="$(command -v "$RBENV_COMMAND" || true)"
else
  RBENV_COMMAND_PATH="${RBENV_ROOT}/versions/${RBENV_VERSION}/bin/${RBENV_COMMAND}"
fi

if [ ! -x "$RBENV_COMMAND_PATH" ]; then
  # discover user-install'ed gem executables
  user_install_path=""
  if [ -n "$GEM_HOME" ]; then
    user_install_path="${GEM_HOME}/bin/${RBENV_COMMAND}"
  elif [ "$RBENV_USER_GEMS" != "0" ]; then
    # https://github.com/rubygems/rubygems/blob/7e9afc48a6aa70cc4fcc2c378b387188098c5169/lib/rubygems/defaults.rb#L102-L108
    # FIXME: guessing this path is somewhat fragile and works only when RBENV_VERSION is "X.Y.Z" or "X.Y" but not "system"
    user_dir="${HOME}/.gem"
    [ -e "$user_dir" ] || user_dir="${XDG_DATA_HOME:-$HOME/.local/share}/gem"
    user_install_version="$RBENV_VERSION"
    if [[ $RBENV_VERSION == *.*.* ]]; then
      user_install_version="${RBENV_VERSION%.*}.0"
    elif [[ $RBENV_VERSION == *.* ]]; then
      user_install_version="${RBENV_VERSION}.0"
    fi
    user_install_path="${user_dir}/ruby/${user_install_version}/bin/${RBENV_COMMAND}"
    unset user_dir user_install_version
  fi
  [ ! -x "$user_install_path" ] || RBENV_COMMAND_PATH="$user_install_path"
  unset user_install_path
fi

OLDIFS="$IFS"
IFS=$'\n' scripts=(`rbenv-hooks which`)
IFS="$OLDIFS"
for script in "${scripts[@]}"; do
  source "$script"
done

if [ -x "$RBENV_COMMAND_PATH" ]; then
  echo "$RBENV_COMMAND_PATH"
elif [ "$RBENV_VERSION" != "system" ] && [ ! -d "${RBENV_ROOT}/versions/${RBENV_VERSION}" ]; then
  echo "rbenv: version \`$RBENV_VERSION' is not installed (set by $(rbenv-version-origin))" >&2
  exit 1
else
  echo "rbenv: $RBENV_COMMAND: command not found" >&2

  versions="$(rbenv-whence "$RBENV_COMMAND" || true)"
  if [ -n "$versions" ]; then
    { echo
      echo "The \`$1' command exists in these Ruby versions:"
      echo "$versions" | sed 's/^/  /g'
      echo
    } >&2
  fi

  exit 127
fi
