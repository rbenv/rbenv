#!/usr/bin/env bash
# Summary: Configure the shell environment for rbenv
# Usage: eval "$(rbenv init - [--no-rehash] [<shell>])"

set -e
[ -n "$RBENV_DEBUG" ] && set -x

print=""
no_rehash=""
for args in "$@"
do
  if [ "$args" = "-" ]; then
    print=1
    shift
  fi

  if [ "$args" = "--no-rehash" ]; then
    no_rehash=1
    shift
  fi
done

shell="$1"
if [ -z "$shell" ]; then
  shell="$(basename "$SHELL")"
fi

READLINK=$(type -p greadlink readlink | head -1)
if [ -z "$READLINK" ]; then
  echo "rbenv: cannot find readlink - are you missing GNU coreutils?" >&2
  exit 1
fi

resolve_link() {
  $READLINK "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

nodups_path() {

  local colon_list="${1}"
  local string_to_move="${2}"

  # Script to split fields into tokens
  #
  # Borrowed from:
  # http://stackoverflow.com/questions/1617771/splitting-string-into-array

  while true ; do
    local part=${colon_list%%:*}
    colon_list=${colon_list#*:}
    if [[ "${part}" != "${string_to_move}" ]]; then
      local parts[i++]=$part
    fi
    if test "$colon_list" = "$part" ; then
      break
    fi
  done

  local new_path=""

  for part in "${parts[@]}"
  do
    if [ -z "${new_path}" ]; then
      new_path="$part"
    else
      new_path="$new_path:$part"
    fi
  done

  echo "$string_to_move:$new_path"

}

root="$(abs_dirname "$0")/.."

if [ -z "$print" ]; then
  case "$shell" in
  bash )
    profile='~/.bash_profile'
    ;;
  zsh )
    profile='~/.zshrc'
    ;;
  ksh )
    profile='~/.profile'
    ;;
  * )
    profile='your profile'
    ;;
  esac

  { echo "# Load rbenv automatically by adding"
    echo "# the following to ${profile}:"
    echo
    echo 'eval "$(rbenv init -)"'
    echo
  } >&2

  exit 1
fi

mkdir -p "${RBENV_ROOT}/"{shims,versions}

echo 'export PATH="'`nodups_path "${PATH}" "${RBENV_ROOT}/shims"`'"'


case "$shell" in
bash | zsh )
  echo "source \"$root/completions/rbenv.${shell}\""
  ;;
esac

if [ -z "$no_rehash" ]; then
  echo 'rbenv rehash 2>/dev/null'
fi

commands=(`rbenv-commands --sh`)
IFS="|"
cat <<EOS
rbenv() {
  typeset command
  command="\$1"
  if [ "\$#" -gt 0 ]; then
    shift
  fi

  case "\$command" in
  ${commands[*]})
    eval "\`rbenv "sh-\$command" "\$@"\`";;
  *)
    command rbenv "\$command" "\$@";;
  esac
}
EOS
